#version 450
// glslangValidator conv123.comp -V -q -e main -o conv123.spv -DCONV1D

#define DIM1D 64
#define DIM2D 8
#define DIM3D 4

layout(binding = 0) readonly buffer file1 { float v[]; } weights1;
layout(binding = 0) readonly buffer file1_4 { vec4 v[]; } weights1_4;

layout(binding = 1) readonly buffer dir1 { float v[]; } input1;
layout(binding = 1) readonly buffer dir1_4 { vec4 v[]; } input1_4;

layout(binding = 2) buffer dir2 { float v[]; } output1;
layout(binding = 2) buffer dir2_4 { vec4 v[]; } output1_4;

layout(binding = 3) buffer pad1 { float v[]; } input2;
layout(binding = 3) buffer pad1_4 { vec4 v[]; } input2_4;

layout(binding = 4) buffer pad2 { float v[]; } output2;
layout(binding = 4) buffer pad2_4 { vec4 v[]; } output2_4;

layout(binding = 5) buffer memory1 { float v[]; } tmp1;
layout(binding = 5) buffer memory1_4 { vec4 v[]; } tmp1_4;

layout(binding = 6) buffer memory2 { float v[]; } tmp2;
layout(binding = 6) buffer memory2_4 { vec4 v[]; } tmp2_4;

layout(binding = 7) buffer memory3 { float v[]; } tmp1_x2;
layout(binding = 7) buffer memory3_4 { vec4 v[]; } tmp1_x2_4;

layout(binding = 8) buffer memory4 { float v[]; } tmp2_x2;
layout(binding = 8) buffer memory4_4 { vec4 v[]; } tmp2_x2_4;

float none(in float _x) { return _x; }
vec4 none4(in vec4 _x) { return _x; }

float relu(in float _x) { return max(0.0, _x); }
vec4 relu4(in vec4 _x) { return max(vec4(0.0), _x); }


//---------------------------------- 1D --------------------------------------


#define clear1d(value, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint oindex = gID.x * shape.y;\
	for(uint i = 0; i < shape.y; ++i) output[oindex+i] = value;\
}


#define pad1d(value, input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	if(gl_WorkGroupID.x == 0 || gl_WorkGroupID.x == gl_NumWorkGroups.x-1)\
	{\
		uint oindex = gID.x * shape.y;\
		for(uint i = 0; i < shape.y; ++i) output[oindex+i] = value;\
	}\
	else\
	{\
		uint iindex = (gID.x - DIM1D) * shape.y;\
		uint oindex = gID.x * shape.y;\
		for(uint i = 0; i < shape.y; ++i) output[oindex+i] = input[iindex+i];\
	}\
}


#define unpad1d(input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint iindex = (gID.x + DIM1D) * shape.y;\
	uint oindex = gID.x * shape.y;\
	for(uint i = 0; i < shape.y; ++i) output[oindex+i] = input[iindex+i];\
}


#define conv1d(T, input, ishape, filters, fshape, activ, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint offset = DIM1D - ((fshape.x-1)>>1);\
	for(uint o = 0; o < fshape.z; ++o)\
	{\
		T value = T(0.0);\
		for(uint w = 0; w < fshape.x; ++w)\
		{\
			for(uint i = 0; i < fshape.y; ++i)\
			{\
					uint iindex = (gID.x+offset+w)*ishape.y + i;\
					uint windex = w*fshape.z*fshape.y + i*fshape.z + o;\
					value += filters[windex] * input[iindex];\
			}\
		}\
		uint oindex = (gID.x + DIM1D) * fshape.z + o;\
		T bias = filters[fshape.x*fshape.y*fshape.z + o];\
		output[oindex] = activ(value + bias);\
	}\
}


#ifdef PAD1D
layout (local_size_x = DIM1D) in;
void main() 
{
	clear1d(0.0, uvec2(0, 4), tmp1.v);
	clear1d(0.0, uvec2(0, 4), tmp2.v);
	pad1d(0.0, input1.v, uvec2(0, 1), input2.v);
}
#endif

#ifdef CONV1D
layout (local_size_x = DIM1D) in;
void main() 
{		
	uvec3 fshape = uvec3(3, 1, 4); // (filter_width; in_channels, out_channels)
	uvec2 ishape = uvec2(0, 1); // (in_width, in_channels)

	conv1d(float, input2.v, ishape, weights1.v, fshape, relu, output2.v);
}
#endif

#ifdef UNPAD1D
layout (local_size_x = DIM1D) in;
void main() 
{	
	unpad1d(output2.v, uvec2(0, 4), output1.v);	
}
#endif


//---------------------------------- 2D --------------------------------------


#define clear2d(value, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint oindex = gID.y*(shape.y + 2*DIM2D)*shape.z + gID.x*shape.z;\
	for(uint i = 0; i < shape.z; ++i) output[oindex+i] = value;\
}


#define pad2d(value, input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	if(gl_WorkGroupID.x == 0 || gl_WorkGroupID.x == gl_NumWorkGroups.x-1 || gl_WorkGroupID.y == 0 || gl_WorkGroupID.y == gl_NumWorkGroups.y-1)\
	{\
		uint oindex = gID.y*(shape.y + 2*DIM2D)*shape.z + gID.x*shape.z;\
		for(uint i = 0; i < shape.z; ++i) output[oindex+i] = value;\
	}\
	else\
	{\
		uint iindex = (gID.y - DIM2D)*shape.y*shape.z + (gID.x - DIM2D)*shape.z;\
		uint oindex = gID.y*(shape.y + 2*DIM2D)*shape.z + gID.x*shape.z;\
		for(uint i = 0; i < shape.z; ++i) output[oindex+i] = input[iindex+i];\
	}\
}


#define unpad2d(input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint iindex = (gID.y + DIM2D)*(shape.y + 2*DIM2D)*shape.z + (gID.x + DIM2D)*shape.z;\
	uint oindex = gID.y*shape.y*shape.z + gID.x*shape.z;\
	for(uint i = 0; i < shape.z; ++i) output[oindex+i] = input[iindex+i];\
}


#define conv2d(T, input, ishape, filters, fshape, activ, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uvec2 offset = DIM2D - ((fshape.yx-1)>>1);\
	uint dim = fshape.z / ishape.z;\
	for(uint o = 0; o < fshape.w; ++o)\
	{\
		T value = T(0.0);\
		for(uint h = 0; h < fshape.x; ++h)\
		{\
			for(uint w = 0; w < fshape.y; ++w)\
			{\
				for(uint i = 0; i < fshape.z; ++i)\
				{\
					uint iindex = (gID.y+offset.y+h)*(ishape.y + 2*DIM2D)*ishape.z + (gID.x+offset.x+w)*ishape.z + i/dim;\
					uint windex = h*fshape.y*fshape.z*fshape.w + w*fshape.z*fshape.w + i*fshape.w + o;\
					value += filters[windex] * input[iindex];\
				}\
			}\
		}\
		uint oindex = (gID.y + DIM2D)*(ishape.y + 2*DIM2D)*fshape.w + (gID.x + DIM2D)*fshape.w + o;\
		T bias = filters[fshape.x*fshape.y*fshape.z*fshape.w + o];\
		output[oindex] = activ(value + bias);\
	}\
}


#define shuffle2d(input, ishape, scale, output, oshape) {\
	uvec3 gID = gl_GlobalInvocationID;\
	for(uint o = 0; o < oshape.z; ++o)\
	{\
		for(uint h = 0; h < scale; ++h)\
		{\
			for(uint w = 0; w < scale; ++w)\
			{\
				uint iindex = (gID.y + DIM2D)*(ishape.y + 2*DIM2D)*ishape.z + (gID.x + DIM2D)*ishape.z + o*scale*scale + h*scale + w;\
				uint oindex = (gID.y + DIM2D + h)*(oshape.y + 2*DIM2D)*oshape.z + (gID.x + DIM2D + w)*oshape.z + o;\
				output[oindex] = input[iindex];\
			}\
		}\
	}\
}


#ifdef PAD2D
layout (local_size_x = DIM2D, local_size_y = DIM2D) in;
void main() 
{
	// float version
	/*
	clear2d(0.0, uvec3(0, 256, 12), tmp1.v);
	clear2d(0.0, uvec3(0, 256, 12), tmp2.v);
	clear2d(0.0, uvec3(0, 256, 12), output2.v);
	pad2d(0.0, input1.v, uvec3(0, 256, 4), input2.v);
	*/

	// vec4 version
	clear2d(vec4(0.0), uvec3(0, 256, 3), tmp1_4.v);
	clear2d(vec4(0.0), uvec3(0, 256, 3), tmp2_4.v);
	clear2d(vec4(0.0), uvec3(0, 256, 3), output2_4.v);
	pad2d(vec4(0.0), input1_4.v, uvec3(0, 256, 1), input2_4.v);
}
#endif

#ifdef CONV2D
layout (local_size_x = DIM2D, local_size_y = DIM2D) in;
void main() 
{
	// float version
	/*
	uvec4 fshape = uvec4(3, 3, 4, 12); // (filter_height, filter_width, in_channels, out_channels)
	uvec3 ishape = uvec3(0, 256, 4); // (in_height, in_width, in_channels)
	conv2d(float, input2.v, ishape, weights1.v, fshape, relu, output2.v);
	*/

	// vec4 version
	uvec4 fshape = uvec4(3, 3, 4, 3); // (filter_height, filter_width, in_channels, out_channels)
	uvec3 ishape = uvec3(0, 256, 1); // (in_height, in_width, in_channels)
	conv2d(vec4, input2_4.v, ishape, weights1_4.v, fshape, relu4, output2_4.v);
}
#endif

#ifdef SHUFFLE2D
layout (local_size_x = DIM2D, local_size_y = DIM2D) in;
void main() 
{
	uint scale = 2;
	uvec3 ishape = uvec3(0, 256, 12);	// (in_height, in_width, in_channels)
	uvec3 oshape = uvec3(0, ishape.y*scale, ishape.z/(scale*scale)); // (out_height, out_width, out_channels)

	shuffle2d(tmp2.v, ishape, scale, tmp1_x2.v, oshape);	
}
#endif

#ifdef UNPAD2D
layout (local_size_x = DIM2D, local_size_y = DIM2D) in;
void main() 
{
	// float version
	//unpad2d(output2.v, uvec3(0, 256, 12), output1.v);

	// vec4 version
	unpad2d(output2_4.v, uvec3(0, 256, 3), output1_4.v);
}
#endif

//---------------------------------- 3D --------------------------------------


#define clear3d(value, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint oindex = gID.z*(shape.y + 2*DIM3D)*(shape.z + 2*DIM3D)*shape.w + gID.y*(shape.z + 2*DIM3D)*shape.w + gID.x*shape.w;\
	for(uint i = 0; i < shape.w; ++i) output[oindex+i] = value;\
}


#define pad3d(value, input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	if(gl_WorkGroupID.x == 0 || gl_WorkGroupID.x == gl_NumWorkGroups.x-1 || gl_WorkGroupID.y == 0 || gl_WorkGroupID.y == gl_NumWorkGroups.y-1 || gl_WorkGroupID.z == 0 || gl_WorkGroupID.z == gl_NumWorkGroups.z-1)\
	{\
		uint oindex = gID.z*(shape.y + 2*DIM3D)*(shape.z + 2*DIM3D)*shape.w + gID.y*(shape.z + 2*DIM3D)*shape.w + gID.x*shape.w;\
		for(uint i = 0; i < shape.w; ++i) output[oindex+i] = value;\
	}\
	else\
	{\
		uint iindex = (gID.z - DIM3D)*shape.y*shape.z*shape.w + (gID.y - DIM3D)*shape.z*shape.w + (gID.x - DIM3D)*shape.w;\
		uint oindex = gID.z*(shape.y + 2*DIM3D)*(shape.z + 2*DIM3D)*shape.w + gID.y*(shape.z + 2*DIM3D)*shape.w + gID.x*shape.w;\
		for(uint i = 0; i < shape.w; ++i) output[oindex+i] = input[iindex+i];\
	}\
}


#define unpad3d(input, shape, output) {\
	uvec3 gID = gl_GlobalInvocationID;\
	uint iindex = (gID.z + DIM3D)*(shape.y + 2*DIM3D)*(shape.z + 2*DIM3D)*shape.w + (gID.y + DIM3D)*(shape.z + 2*DIM3D)*shape.w + (gID.x + DIM3D)*shape.w;\
	uint oindex = gID.z*shape.y*shape.z*shape.w + gID.y*shape.z+shape.w + gID.x*shape.w;\
	for(uint i = 0; i < shape.w; ++i) output[oindex+i] = input[iindex+i];\
}


#define conv3d(T, input, ishape, filters, fshape, activ, output) {\
}


#ifdef PAD3D
layout (local_size_x = DIM3D, local_size_y = DIM3D, local_size_z = DIM3D) in;
void main() 
{
	clear3d(0.0, uvec4(0, 32, 32, 12), tmp1.v);
	clear3d(0.0, uvec4(0, 32, 32, 12), tmp2.v);
	clear3d(0.0, uvec4(0, 32, 32, 12), output2.v);
	pad3d(0.0, input1.v, uvec4(0, 32, 32, 3), input2.v);
}
#endif

#ifdef CONV3D
layout (local_size_x = DIM3D, local_size_y = DIM3D, local_size_z = DIM3D) in;
void main() 
{

}
#endif

#ifdef UNPAD3D
layout (local_size_x = DIM3D, local_size_y = DIM3D, local_size_z = DIM3D) in;
void main() 
{	
	unpad3d(output2.v, uvec4(0, 32, 32, 12), output1.v);
}
#endif

