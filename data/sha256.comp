#version 450

uint ROTLEFT(in uint a, in int b) { return (a << b) | (a >> (32-b)); }
uint ROTRIGHT(in uint a, in int b) { return (a >> b) | (a << (32-b)); }

uint CH(in uint x, in uint y, in uint z) { return (x & y) ^ (~x & z); }
uint MAJ(in uint x, in uint y, in uint z) { return (x & y) ^ (x & z) ^ (y & z); }
uint EP0(in uint x) { return ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22); }
uint EP1(in uint x) { return ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25); }
uint SIG0(in uint x) { return ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ (x >> 3); }
uint SIG1(in uint x) { return ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ (x >> 10); }

uint K[64] = uint[64](
	0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
	0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
	0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
	0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
	0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
	0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
	0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
);

struct sha256 { uint hash[8]; };

void sha256_init(out sha256 _sha256)
{
	_sha256.hash[0] = 0x6a09e667;
	_sha256.hash[1] = 0xbb67ae85;
	_sha256.hash[2] = 0x3c6ef372;
	_sha256.hash[3] = 0xa54ff53a;
	_sha256.hash[4] = 0x510e527f;
	_sha256.hash[5] = 0x9b05688c;
	_sha256.hash[6] = 0x1f83d9ab;
	_sha256.hash[7] = 0x5be0cd19;
}

void sha256_copy(out sha256 _sha256, in uint _hash[8])
{
	_sha256.hash = _hash;
}

void sha256_transform(inout sha256 _sha256, in uint data[16])
{
	uint a, b, c, d, e, f, g, h, i, t1, t2, m[64];

	for (i = 0; i < 16; ++i)
		m[i] = data[i];

	for (; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = _sha256.hash[0];
	b = _sha256.hash[1];
	c = _sha256.hash[2];
	d = _sha256.hash[3];
	e = _sha256.hash[4];
	f = _sha256.hash[5];
	g = _sha256.hash[6];
	h = _sha256.hash[7];

	for (i = 0; i < 64; ++i)
	{
		t1 = h + EP1(e) + CH(e, f, g) + K[i] + m[i];
		t2 = EP0(a) + MAJ(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
	}

	_sha256.hash[0] += a;
	_sha256.hash[1] += b;
	_sha256.hash[2] += c;
	_sha256.hash[3] += d;
	_sha256.hash[4] += e;
	_sha256.hash[5] += f;
	_sha256.hash[6] += g;
	_sha256.hash[7] += h;
}

layout(binding = 0) buffer SHA256 { uint hash[8]; uint start; } Work;
layout(binding = 1) buffer Nonce { uint nonce; } Output;

#ifdef TEST
layout (local_size_x = 64) in;
void main() 
{		
	uint gID = gl_GlobalInvocationID.x;
	
	sha256 sha;
	sha256_init(sha);

	// empty message + 0x80
	//uint data[16] = uint[16](0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

	// 'A'=0x41 message + 0x80 + sizeof('A')=8bits
	uint data[16] = uint[16](0x41800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8);
	sha256_transform(sha, data);
}
#endif

#ifdef MINING
layout (local_size_x = 64) in;
void main() 
{		
	uint gID = gl_GlobalInvocationID.x;
	uint nonce = Work.start + gID;
	if(nonce == 0) Output.nonce = 0;
	
	sha256 sha;
	sha256_init(sha);

	uint data[16] = uint[16](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	data[0] = Work.hash[0];
	data[1] = Work.hash[1];
	data[2] = Work.hash[2];
	data[3] = Work.hash[3];
	data[4] = Work.hash[4];
	data[5] = Work.hash[5];
	data[6] = Work.hash[6];
	data[7] = Work.hash[7];

	data[8] = nonce;
	data[9] = 0x80000000;
	data[15] = 288; // sha 256 + nonce 32 (bits)
	sha256_transform(sha, data);
	
	if((sha.hash[0] & 0xfffffff0) == 0) Output.nonce = nonce;
}
#endif

